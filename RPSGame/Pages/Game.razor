@*Game page renders the whole game.
    Firstly, it print user`s name and number of rounds making one game.
    Then, it renders three images which the user should choose.
    After that the game shows the robot`s choice and print out the winner.
    The game is over whenever one of them has more rounds won.*@

@page "/game"
@inject Services.GameService _gameService

<div class="container">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-center">
                <h4>
                    @this._gameService.Name, one game includes @this._gameService.Rounds rounds,<br />
                    choose ROCK, PAPER or SCISSORS
                </h4>
            </div>
        </div>
    </div>
    <div class="row" hidden="@IsPlayerChoiceSet">
        <PlayerChoice @bind-IsChoice="IsPlayerChoiceSet" />
    </div>
    <div class="row" hidden="@_isResultHidden">
        
    </div>
</div>

@code {
    private bool _isResultHidden = true;
    private bool _isPlayerChoiceSet = false;

    public bool IsPlayerChoiceSet
    {
        get => this._isPlayerChoiceSet;
        set
        {
            this._isPlayerChoiceSet = value;

            ShowWinner();

            // Re-render the whole page as notify that the state has changed
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    /// <summary>
    /// Invoke method to set the robot choice,
    /// then set the winner,
    /// finally show the winner
    /// </summary>
    private void ShowWinner()
    {
        this._gameService.SetRobotChoice();
        this._gameService.SetWinner();
        this._isResultHidden = false;
        StateHasChanged();
    }
}

